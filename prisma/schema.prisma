// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Models
model User {
  id                String          @id @default(cuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole        @default(USER)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  accounts          Account[]
  sessions          Session[]
  addresses         Address[]
  orders            Order[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
}

// E-commerce Models
model Product {
  id                 String        @id @default(cuid())
  name               String
  slug               String        @unique
  description        String        @db.Text
  price              Decimal       @db.Decimal(10, 2)
  compareAtPrice     Decimal?      @db.Decimal(10, 2)
  images             Json[]        // URLs to product images
  inventory          Int           @default(0)
  weight             Decimal?      @db.Decimal(8, 2)
  dimensions         Json?         // {length, width, height}
  sku                String?       @unique
  featured           Boolean       @default(false)
  isPublished        Boolean       @default(true)
  categoryId         String
  metaTitle          String?
  metaDescription    String?       @db.Text
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  
  category           Category      @relation(fields: [categoryId], references: [id])
  reviews            Review[]
  orderItems         OrderItem[]
  wishlistItems      WishlistItem[]

  @@index([categoryId])
  @@index([isPublished])
  @@index([featured])
}

model Category {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  description      String?   @db.Text
  image            String?   // URL to category image
  isActive         Boolean   @default(true)
  parentId         String?
  metaTitle        String?
  metaDescription  String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  products         Product[]
  parent           Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories    Category[] @relation("CategoryToCategory")

  @@index([parentId])
  @@index([isActive])
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  status            OrderStatus @default(PENDING)
  subtotal          Decimal     @db.Decimal(10, 2)
  tax               Decimal     @db.Decimal(10, 2)
  shipping          Decimal     @db.Decimal(10, 2)
  total             Decimal     @db.Decimal(10, 2)
  shippingAddressId String
  billingAddressId  String?
  paymentIntentId   String?
  paymentStatus     PaymentStatus @default(PENDING)
  currency          String      @default("INR")
  notes             String?     @db.Text
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  user              User        @relation(fields: [userId], references: [id])
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items             OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
  @@index([shippingAddressId])
  @@index([billingAddressId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)
  totalPrice  Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Address {
  id               String    @id @default(cuid())
  userId           String
  name             String
  phone            String
  addressLine1     String
  addressLine2     String?
  city             String
  state            String
  postalCode       String
  country          String    @default("India")
  isDefault        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders   Order[]   @relation("ShippingAddress")
  billingOrders    Order[]   @relation("BillingAddress")

  @@index([userId])
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  productId   String
  rating      Int       // 1-5 stars
  title       String?
  content     String?   @db.Text
  isVerified  Boolean   @default(false)
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([isPublished])
}

model WishlistItem {
  id          String    @id @default(cuid())
  userId      String
  productId   String
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Post {
  id             String    @id @default(cuid())
  title          String
  slug           String    @unique
  content        String    @db.Text
  excerpt        String?   @db.Text
  featuredImage  String?
  isPublished    Boolean   @default(false)
  publishedAt    DateTime?
  metaTitle      String?
  metaDescription String?   @db.Text
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([isPublished])
}
